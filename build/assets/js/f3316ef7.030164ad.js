"use strict";(self.webpackChunkmorph_doc=self.webpackChunkmorph_doc||[]).push([[8224],{9544:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>d,toc:()=>l});var t=o(6070),r=o(1582);const a={title:"Run a validator from source",lang:"en-US"},s=void 0,d={id:"build-on-morph/developer-resources/node-operation/validator-node/run-on-host",title:"Run a validator from source",description:"Run a Morph Validator",source:"@site/docs/build-on-morph/developer-resources/node-operation/validator-node/2-run-on-host.md",sourceDirName:"build-on-morph/developer-resources/node-operation/validator-node",slug:"/build-on-morph/developer-resources/node-operation/validator-node/run-on-host",permalink:"/docs/build-on-morph/developer-resources/node-operation/validator-node/run-on-host",draft:!1,unlisted:!1,editUrl:"https://github.com/morph-l2/morph-doc/tree/main/docs/build-on-morph/developer-resources/node-operation/validator-node/2-run-on-host.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Run a validator from source",lang:"en-US"},sidebar:"DeveloperSidebar",previous:{title:"Run a validator with docker",permalink:"/docs/build-on-morph/developer-resources/node-operation/validator-node/run-in-docker"},next:{title:"Upgrade node running from docker",permalink:"/docs/build-on-morph/developer-resources/node-operation/upgrade-node/upgrade-node-docker"}},i={},l=[{value:"Run a Morph Validator",id:"run-a-morph-validator",level:2},{value:"Build executable binary",id:"build-executable-binary",level:2},{value:"Clone Morph",id:"clone-morph",level:3},{value:"Build Geth",id:"build-geth",level:3},{value:"Build Node",id:"build-node",level:3},{value:"Sync from the snapshot",id:"sync-from-the-snapshot",level:2},{value:"Config Preparation",id:"config-preparation",level:3},{value:"Download snapshot",id:"download-snapshot",level:3},{value:"Script to start the process",id:"script-to-start-the-process",level:2},{value:"Geth",id:"geth",level:3},{value:"Node",id:"node",level:3},{value:"Check Status",id:"check-status",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"run-a-morph-validator",children:"Run a Morph Validator"}),"\n",(0,t.jsxs)(n.p,{children:["This guide describes the approach to running a Morph validator node. If you are unfamiliar with the validator duties, please refer to our ",(0,t.jsx)(n.a,{href:"/docs/how-morph-works/optimistic-zkevm",children:"optimistic zkEVM"})," design."]}),"\n",(0,t.jsxs)(n.p,{children:["Create the folder ",(0,t.jsx)(n.code,{children:"~/.morph"})," as our home directory for this example."]}),"\n",(0,t.jsx)(n.h2,{id:"build-executable-binary",children:"Build executable binary"}),"\n",(0,t.jsx)(n.h3,{id:"clone-morph",children:"Clone Morph"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"mkdir -p ~/.morph \ncd ~/.morph\ngit clone https://github.com/morph-l2/morph.git\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Next, you need to check out a release version. You can find the available release versions on the ",(0,t.jsx)(n.a,{href:"https://github.com/morph-l2/morph/releases",children:"Morph Releases"})," page. It is recommended to use the latest release version."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"cd morph\ngit checkout ${RELEASE_VERSION}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"build-geth",children:"Build Geth"}),"\n",(0,t.jsx)(n.p,{children:"Notice: You need C compiler to build geth"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"make geth\n"})}),"\n",(0,t.jsx)(n.h3,{id:"build-node",children:"Build Node"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cd ~/.morph/morph/node \nmake build\n"})}),"\n",(0,t.jsx)(n.h2,{id:"sync-from-the-snapshot",children:"Sync from the snapshot"}),"\n",(0,t.jsx)(n.h3,{id:"config-preparation",children:"Config Preparation"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Download the config files and make data dir"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cd ~/.morph\n\n## mainnet\nwget https://raw.githubusercontent.com/morph-l2/run-morph-node/main/mainnet/data.zip\n\n## testnet\nwget https://raw.githubusercontent.com/morph-l2/run-morph-node/main/holesky/data.zip\n\nunzip data.zip\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Create a shared secret with node"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cd ~/.morph\nopenssl rand -hex 32 > jwt-secret.txt\n"})}),"\n",(0,t.jsx)(n.h3,{id:"download-snapshot",children:"Download snapshot"}),"\n",(0,t.jsx)(n.p,{children:"Download the latest snapshot corresponding to either the mainnet or testnet network."}),"\n",(0,t.jsxs)(n.p,{children:["A complete record of historical snapshots is available ",(0,t.jsx)(n.a,{href:"https://github.com/morph-l2/run-morph-node?tab=readme-ov-file#snapshot-information",children:"here"}),". Below is an example of how to download a snapshot"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"## mainnet\nwget -q --show-progress https://snapshot.morphl2.io/mainnet/${SNAPSHOT_NAME}.tar.gz\ntar -xzvf ${SNAPSHOT_NAME}.tar.gz\n\n## holesky\nwget -q --show-progress https://snapshot.morphl2.io/holesky/${SNAPSHOT_NAME}.tar.gz\ntar -xzvf ${SNAPSHOT_NAME}.tar.gz\n"})}),"\n",(0,t.jsx)(n.p,{children:"Extracting snapshot data to the data directory your node points to"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"mv ${SNAPSHOT_NAME}/geth geth-data\nmv ${SNAPSHOT_NAME}/data node-data\n"})}),"\n",(0,t.jsx)(n.h2,{id:"script-to-start-the-process",children:"Script to start the process"}),"\n",(0,t.jsx)(n.h3,{id:"geth",children:"Geth"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:'title="Script for starting mainnet geth"',children:'./morph/go-ethereum/build/bin/geth --morph \\\n    --datadir "./geth-data" \\\n    --http --http.api=web3,debug,eth,txpool,net,engine \\\n    --authrpc.addr localhost \\\n    --authrpc.vhosts="localhost" \\\n    --authrpc.port 8551 \\\n    --authrpc.jwtsecret=./jwt-secret.txt \\\n    --log.filename=./geth.log\n\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["For testnet, using ",(0,t.jsx)(n.code,{children:"--morph-holesky"})," instead"]})}),"\n",(0,t.jsxs)(n.p,{children:["tail -f ",(0,t.jsx)(n.code,{children:"geth.log"})," to check if the Geth is running properly, or you can also execute the below curl command to check if you are connected to the peer."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'curl --location --request POST \'localhost:8545/\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n   "jsonrpc":"2.0",\n   "method":"eth_blockNumber",\n   "id":1\n}\'\n\n{"jsonrpc":"2.0","id":1,"result":"0x148e39"}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"node",children:"Node"}),"\n",(0,t.jsxs)(n.p,{children:["You need to set the ",(0,t.jsx)(n.code,{children:"DERIVATION_START_HEIGHT"})," and ",(0,t.jsx)(n.code,{children:"L1_MSG_START_HEIGHT"})," variables correctly to match the snapshot version you downloaded. From the ",(0,t.jsx)(n.a,{href:"https://github.com/morph-l2/run-morph-node?tab=readme-ov-file#snapshot-information",children:"snapshot information"}),", you can find the corresponding height values."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cd ~/.morph\n\n## mainnet\nexport CHAIN_ID=1\nexport L1MESSAGEQUEUE_CONTRACT=0x3931ade842f5bb8763164bdd81e5361dce6cc1ef\nexport ROLLUP=0x759894ced0e6af42c26668076ffa84d02e3cef60\nexport DERIVATION_START_HEIGHT=${The height matches your snapshot}\nexport L1_MSG_START_HEIGHT=${The height matches your snapshot}\n\n## start node\n./morph/node/build/bin/morphnode --validator --home ./node-data \\\n     --l2.jwt-secret ./jwt-secret.txt \\\n     --l2.eth http://localhost:8545 \\\n     --l2.engine http://localhost:8551 \\\n     --l1.rpc $(Ethereum RPC)  \\\n     --l1.beaconrpc $(Ethereum beacon chain RPC)  \\\n     --l1.chain-id ${CHAIN_ID}   \\\n     --validator.privateKey 0x0000000000000000000000000000000000000000000000000000000000000001  \\\n     --sync.depositContractAddr ${L1MESSAGEQUEUE_CONTRACT} \\\n     --sync.startHeight  ${L1_MSG_START_HEIGHT} \\\n     --derivation.rollupAddress ${ROLLUP} \\\n     --derivation.startHeight  ${DERIVATION_START_HEIGHT} \\\n     --derivation.fetchBlockRange 200 \\\n     --log.filename ./node.log\n"})}),"\n",(0,t.jsx)(n.p,{children:"For holesky network, using"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"export CHAIN_ID=17000 \nexport L1MESSAGEQUEUECONTRACT=0x778d1d9a4d8b6b9ade36d967a9ac19455ec3fd0b\nexport ROLLUP=0xd8c5c541d56f59d65cf775de928ccf4a47d4985c\nexport DERIVATION_START_HEIGHT=${The height matches your snapshot}\nexport L1_MSG_START_HEIGHT=${The height matches your snapshot}\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Note the ",(0,t.jsx)(n.strong,{children:"validator.privateKey"})," is of no use to you. It is used to send challenges when the state root is found to be incorrect. However, we do not currently accept challenges from third party addresses. But it is also a required parameter for the morphnode command, so we give a ",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"0x00... 1"})}),"."]})}),"\n",(0,t.jsx)(n.h2,{id:"check-status",children:"Check Status"}),"\n",(0,t.jsx)(n.p,{children:"If your node is successfully started, you will see the following response:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'I[2024-06-06|15:57:35.216] metrics server enabled                       module=derivation host=0.0.0.0 port=26660\nderivation node starting\nID> 24-06-06|15:57:35.216] initial sync start                           module=syncer msg="Running initial sync of L1 messages before starting sequencer, this might take a while..."\nI[2024-06-06|15:57:35.242] initial sync completed                       module=syncer latestSyncedBlock=1681622\nI[2024-06-06|15:57:35.242] derivation start pull rollupData form l1     module=derivation startBlock=1681599 end=1681622\nI[2024-06-06|15:57:35.244] fetched rollup tx                            module=derivation txNum=8 latestBatchIndex=59201\nI[2024-06-06|15:57:35.315] fetch rollup transaction success             module=derivation txNonce=8764 txHash=0x5fb8a98472d1be73be2bc6be0807b9e0c68b7ba14a648c8a17bdaff7b26eb923 l1BlockNumber=1681599 firstL2BlockNumber=1347115 lastL2BlockNumber=1347129\nI[2024-06-06|15:57:35.669] new l2 block success                         module=derivation blockNumber=1347115\n'})}),"\n",(0,t.jsx)(n.p,{children:"You can use the following command to check the newest block height to make sure you are aligned."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'curl --location --request POST \'localhost:8545/\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n   "jsonrpc":"2.0",\n   "method":"eth_blockNumber",\n   "id":1\n}\'\n{"jsonrpc":"2.0","id":1,"result":"0x148e39"}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Make sure you check the validator status constantly, if you find response"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"[2024-06-14|16:43:50.904] root hash or withdrawal hash is not equal    originStateRootHash=0x13f91d1c272e48e2d864ce7bfb421506d5b2a04def64d45c75391cdcdd69cd78 deriveStateRootHash=0x27e10420c0e34676a7d75c4189d7ccd1c3407cc8fd0b3eafb01c15e250a1215f batchWithdrawalRoot=0xa3e4a7cf45c7591a6bd9868f1fa7485ae345f10067acaade5f5b07d418b2e172 deriveWithdrawalRoot=0xa3e4a7cf45c7591a6bd9868f1fa7485ae345f10067acaade5f5b07d418b2e172\n"})}),"\n",(0,t.jsx)(n.p,{children:"This means your validators find inconsistent between sequencer submission and your own observation."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},1582:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>d});var t=o(758);const r={},a=t.createContext(r);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);