"use strict";(self.webpackChunkmorph_doc=self.webpackChunkmorph_doc||[]).push([[6951],{613:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>a,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var t=o(6070),r=o(1582);const s={title:"Run a full node from source",lang:"en-US"},i=void 0,l={id:"build-on-morph/developer-resources/node-operation/full-node/run-on-host",title:"Run a full node from source",description:"This guide outlines the steps to start a Morph node. The example assumes the home directory is ~/.morph",source:"@site/docs/build-on-morph/developer-resources/node-operation/full-node/2-run-on-host.md",sourceDirName:"build-on-morph/developer-resources/node-operation/full-node",slug:"/build-on-morph/developer-resources/node-operation/full-node/run-on-host",permalink:"/docs/build-on-morph/developer-resources/node-operation/full-node/run-on-host",draft:!1,unlisted:!1,editUrl:"https://github.com/morph-l2/morph-doc/tree/main/docs/build-on-morph/developer-resources/node-operation/full-node/2-run-on-host.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Run a full node from source",lang:"en-US"},sidebar:"DeveloperSidebar",previous:{title:"Run a full node with docker",permalink:"/docs/build-on-morph/developer-resources/node-operation/full-node/run-in-docker"},next:{title:"Run a validator with docker",permalink:"/docs/build-on-morph/developer-resources/node-operation/validator-node/run-in-docker"}},d={},c=[{value:"Hardware requirements",id:"hardware-requirements",level:2},{value:"Build executable binary",id:"build-executable-binary",level:2},{value:"Clone morph",id:"clone-morph",level:3},{value:"Build Geth",id:"build-geth",level:3},{value:"Build Node",id:"build-node",level:3},{value:"Config Preparation",id:"config-preparation",level:2},{value:"Start Node",id:"start-node",level:2},{value:"Sync from snapshot(Recommended)",id:"sync-from-snapshotrecommended",level:3},{value:"Download snapshot",id:"download-snapshot",level:4},{value:"Start execution client",id:"start-execution-client",level:4},{value:"Start consensus client",id:"start-consensus-client",level:4},{value:"Check sync status",id:"check-sync-status",level:4},{value:"Sync from genesis block",id:"sync-from-genesis-block",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["This guide outlines the steps to start a Morph node. The example assumes the home directory is ",(0,t.jsx)(n.code,{children:"~/.morph"})]}),"\n",(0,t.jsx)(n.h2,{id:"hardware-requirements",children:"Hardware requirements"}),"\n",(0,t.jsxs)(n.p,{children:["Running the morph node requires 2 processes: ",(0,t.jsx)(n.code,{children:"geth"})," and ",(0,t.jsx)(n.code,{children:"node"}),"."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Geth"}),":the"," Morph execution layer which needs to meet the requirements as below"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Fast CPU with 4+ cores"}),"\n",(0,t.jsx)(n.li,{children:"32GB+ RAM"}),"\n",(0,t.jsx)(n.li,{children:"High-performance SSD with at least 1TB of free space"}),"\n",(0,t.jsx)(n.li,{children:"25+ MBit/sec download Internet service"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Node"}),":the"," Morph consensus layer embedded tendermint which needs to meet the ",(0,t.jsx)(n.a,{href:"https://docs.tendermint.com/v0.34/tendermint-core/running-in-production.html#processor-and-memory",children:"tendermint hardware requirements"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"According to limitations of the current geth implementation, we only support archive mode for launching a Geth.  So the storage size of Geth will constantly increase along with blocks produced."})}),"\n",(0,t.jsx)(n.h2,{id:"build-executable-binary",children:"Build executable binary"}),"\n",(0,t.jsx)(n.h3,{id:"clone-morph",children:"Clone morph"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"mkdir -p ~/.morph \ncd ~/.morph\ngit clone https://github.com/morph-l2/morph.git\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Next, you need to check out a release version. You can find the available release versions on the ",(0,t.jsx)(n.a,{href:"https://github.com/morph-l2/morph/releases",children:"Morph Releases"})," page. It is recommended to use the latest release version."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"cd morph\ngit checkout ${RELEASE_VERSION}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"build-geth",children:"Build Geth"}),"\n",(0,t.jsx)(n.p,{children:"Notice: You need C compiler to build geth"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"make geth\n"})}),"\n",(0,t.jsx)(n.h3,{id:"build-node",children:"Build Node"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"cd ~/.morph/morph/node \nmake build\n"})}),"\n",(0,t.jsx)(n.h2,{id:"config-preparation",children:"Config Preparation"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Download the config files and make data dir"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"cd ~/.morph\n\n## mainnet\nwget https://raw.githubusercontent.com/morph-l2/run-morph-node/main/mainnet/data.zip\n\n## testnet\nwget https://raw.githubusercontent.com/morph-l2/run-morph-node/main/holesky/data.zip\n\nunzip data.zip\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Create a shared secret with node"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"cd ~/.morph\nopenssl rand -hex 32 > jwt-secret.txt\n"})}),"\n",(0,t.jsx)(n.h2,{id:"start-node",children:"Start Node"}),"\n",(0,t.jsx)(n.p,{children:"Mainnet nodes support synchronization from either the genesis block or a snapshot block, while testnet nodes only support synchronization from snapshots."}),"\n",(0,t.jsx)(n.h3,{id:"sync-from-snapshotrecommended",children:"Sync from snapshot(Recommended)"}),"\n",(0,t.jsx)(n.p,{children:"You should build the binary and prepare the config files in the above steps first, then download the snapshot."}),"\n",(0,t.jsx)(n.h4,{id:"download-snapshot",children:"Download snapshot"}),"\n",(0,t.jsx)(n.p,{children:"Download the latest snapshot corresponding to either the mainnet or testnet network."}),"\n",(0,t.jsxs)(n.p,{children:["A complete record of historical snapshots is available ",(0,t.jsx)(n.a,{href:"https://github.com/morph-l2/run-morph-node?tab=readme-ov-file#snapshot-information",children:"here"}),". Below is an example of how to download a snapshot"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"## mainnet\nwget -q --show-progress https://snapshot.morphl2.io/mainnet/${SNAPSHOT_NAME}.tar.gz\ntar -xzvf ${SNAPSHOT_NAME}.tar.gz\n\n## holesky\nwget -q --show-progress https://snapshot.morphl2.io/holesky/${SNAPSHOT_NAME}.tar.gz\ntar -xzvf ${SNAPSHOT_NAME}.tar.gz\n"})}),"\n",(0,t.jsx)(n.p,{children:"Extracting snapshot data to the data directory your node points to"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"mv ${SNAPSHOT_NAME}/geth geth-data\nmv ${SNAPSHOT_NAME}/data node-data\n"})}),"\n",(0,t.jsx)(n.h4,{id:"start-execution-client",children:"Start execution client"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:'title="Script for starting mainnet geth"',children:'./morph/go-ethereum/build/bin/geth --morph \\\n    --datadir "./geth-data" \\\n    --http --http.api=web3,debug,eth,txpool,net,engine \\\n    --authrpc.addr localhost \\\n    --authrpc.vhosts="localhost" \\\n    --authrpc.port 8551 \\\n    --authrpc.jwtsecret=./jwt-secret.txt \\\n    --log.filename=./geth.log\n\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["For testnet, using ",(0,t.jsx)(n.code,{children:"--morph-holesky"})," instead"]})}),"\n",(0,t.jsxs)(n.p,{children:["tail -f  ",(0,t.jsx)(n.code,{children:"geth.log"})," to check if the Geth is running properly, or you can also execute the curl command below to check if you are connected to the peer."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-Shell",children:'curl -X POST -H \'Content-Type: application/json\' --data \'{"jsonrpc":"2.0","method":"net_peerCount","params":[],"id":74}\' localhost:8545\n\n{"jsonrpc":"2.0","id":74,"result":"0x6"}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"start-consensus-client",children:"Start consensus client"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-Bash",children:" ./morph/node/build/bin/morphnode --home ./node-data \\\n     --l2.jwt-secret ./jwt-secret.txt \\\n     --l2.eth http://localhost:8545 \\\n     --l2.engine http://localhost:8551 \\\n     --log.filename ./node.log \n"})}),"\n",(0,t.jsx)(n.p,{children:"tail -f node.log to check if the node is running properly, and you can also execute the command curl to check your node connection status."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-Bash",children:'curl http://localhost:26657/net_info\n\n{\n  "jsonrpc": "2.0",\n  "id": -1,\n  "result": {\n    "listening": true,\n    "listeners": [\n      "Listener(@)"\n    ],\n    "n_peers": "7",\n    "peers": [\n      {\n        "node_info": {\n          "protocol_version": {\n            "p2p": "8",\n            "block": "11",\n            "app": "0"\n          },\n          "id": "b4ac59de479b0251d441ca0385429bc21713a208",\n          "listen_addr": "tcp://0.0.0.0:26610",\n          "network": "chain-morph-mainnet",\n          "version": "0.37.0-alpha.1",\n          "channels": "402021222338606100",\n          "moniker": "morph-dataseed-node-0",\n          "other": {\n            "tx_index": "on",\n            "rpc_address": "tcp://0.0.0.0:26657"\n          }\n        },\n        "is_outbound": true,\n ....... \n'})}),"\n",(0,t.jsx)(n.h4,{id:"check-sync-status",children:"Check sync status"}),"\n",(0,t.jsxs)(n.p,{children:["curl ",(0,t.jsx)(n.a,{href:"http://localhost:26657/status",children:"http://localhost:26657/status"})," to check the sync status of the node"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-Bash",children:'{\n  "jsonrpc": "2.0",\n  "id": -1,\n  "result": {\n    "node_info": {\n      "protocol_version": {\n        "p2p": "8",\n        "block": "11",\n        "app": "0"\n      },\n      "id": "cde0d7cecfe9c82244c1dfa72c951759d02f1024",\n      "listen_addr": "tcp://0.0.0.0:26656",\n      "network": "chain-morph-mainnet",\n      "version": "0.37.0-alpha.1",\n      "channels": "402021222338606100",\n      "moniker": "my-morph-node",\n      "other": {\n        "tx_index": "on",\n        "rpc_address": "tcp://0.0.0.0:26657"\n      }\n    },\n    "sync_info": {\n      "latest_block_hash": "B4C0E514CD984B101FA89D7DB48C1FE18384F64C25E5565F618A5FE2851C42A9",\n      "latest_app_hash": "",\n      "latest_block_height": "2410",\n      "latest_block_time": "2024-10-21T08:49:09.952573291Z",\n      "earliest_block_hash": "0D66D908033DA7A3F5A95179B8D64261EDD887B944E59502A1C9EFBC1C9C4EF5",\n      "earliest_app_hash": "",\n      "earliest_block_height": "1",\n      "earliest_block_time": "2024-10-21T06:00:00Z",\n      "catching_up": false\n    },\n    "validator_info": {\n      "address": "B7395023EFF719D0EE15AD96FFC7F69B6B9E52EF",\n      "pub_key": {\n        "type": "tendermint/PubKeyEd25519",\n        "value": "tZI+wTExwoKeyUFgdSSYmf4sAYp4BhJu13UgPy1wDOc="\n      },\n      "voting_power": "0"\n    }\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The returned ",(0,t.jsx)(n.code,{children:'"catching_up"'})," indicates whether the node is in sync or not. ",(0,t.jsx)(n.em,{children:"True"})," means it is in sync."]}),"\n",(0,t.jsxs)(n.p,{children:["The returned  ",(0,t.jsx)(n.code,{children:'"latest_block_height"'})," indicates the latest block height this node synced."]}),"\n",(0,t.jsx)(n.h3,{id:"sync-from-genesis-block",children:"Sync from genesis block"}),"\n",(0,t.jsx)(n.p,{children:"Start the execution client and consensus client directly without downloading snapshot."})]})}function a(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},1582:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>l});var t=o(758);const r={},s=t.createContext(r);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);