"use strict";(self.webpackChunkmorph_doc=self.webpackChunkmorph_doc||[]).push([[749],{2877:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>l,frontMatter:()=>s,metadata:()=>a,toc:()=>h});var t=o(6070),r=o(1582);const s={title:"Run a validator with docker",lang:"en-US"},i=void 0,a={id:"build-on-morph/developer-resources/node-operation/validator-node/run-in-docker",title:"Run a validator with docker",description:"This guide will help you start a validator node running in the docker container using run-morph-node",source:"@site/docs/build-on-morph/developer-resources/node-operation/validator-node/1-run-in-docker.md",sourceDirName:"build-on-morph/developer-resources/node-operation/validator-node",slug:"/build-on-morph/developer-resources/node-operation/validator-node/run-in-docker",permalink:"/docs/build-on-morph/developer-resources/node-operation/validator-node/run-in-docker",draft:!1,unlisted:!1,editUrl:"https://github.com/morph-l2/morph-doc/tree/main/docs/build-on-morph/developer-resources/node-operation/validator-node/1-run-in-docker.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Run a validator with docker",lang:"en-US"},sidebar:"DeveloperSidebar",previous:{title:"Run a full node from source",permalink:"/docs/build-on-morph/developer-resources/node-operation/full-node/run-on-host"},next:{title:"Run a validator from source",permalink:"/docs/build-on-morph/developer-resources/node-operation/validator-node/run-on-host"}},d={},h=[{value:"Quick Start",id:"quick-start",level:3},{value:"Sync from snapshot",id:"sync-from-snapshot",level:3},{value:"1. Clone the dockerfile repository",id:"1-clone-the-dockerfile-repository",level:4},{value:"2. Download the Snapshot",id:"2-download-the-snapshot",level:4},{value:"3. Set up the snapshot",id:"3-set-up-the-snapshot",level:4},{value:"4. Update the Environment Variables",id:"4-update-the-environment-variables",level:4},{value:"5. Run the Validator",id:"5-run-the-validator",level:4}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["This guide will help you start a validator node running in the docker container using ",(0,t.jsx)(n.a,{href:"https://github.com/morph-l2/run-morph-node",children:"run-morph-node"})]}),"\n",(0,t.jsx)(n.h3,{id:"quick-start",children:"Quick Start"}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["The following quick start steps are only applicable for running a validator node on the mainnet. To set up and operate a Holesky validator node, please refer to ",(0,t.jsx)(n.a,{href:"#sync-from-snapshot",children:(0,t.jsx)(n.strong,{children:"Sync from Snapshot"})}),"."]})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Starting with the ",(0,t.jsx)(n.code,{children:"Quick Start"})," initiates synchronization from height 0, which can be extremely time-consuming to reach the latest state. We highly recommend using the ",(0,t.jsx)(n.a,{href:"#sync-from-snapshot",children:(0,t.jsx)(n.strong,{children:"Sync from Snapshot"})})," approach outlined below for a faster and more efficient startup."]})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"1. Clone the dockerfile repository"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/morph-l2/run-morph-node.git\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["2. Configure ",(0,t.jsx)(n.code,{children:"morph-node/.env"})]})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"morph-node/.env"})," file defines the environment variables required for deploying a validator node. Below is an example configuration:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="morph-node/.env"',children:"// General settings\nMORPH_HOME=../mainnet\nMORPH_FLAG=morph\nJWT_SECRET_FILE=${MORPH_HOME}/jwt-secret.txt\nGETH_ENTRYPOINT_FILE=./entrypoint-geth.sh\n\n// Environment variables for validator node\nL1_CHAIN_ID=1\nL1_ETH_RPC=${your_layer1_execution_client_rpc_url}\nL1_BEACON_CHAIN_RPC=${your_layer1_beacon_client_rpc_url}\nL1MESSAGEQUEUE_CONTRACT=0x3931ade842f5bb8763164bdd81e5361dce6cc1ef\nROLLUP_CONTRACY=0x759894ced0e6af42c26668076ffa84d02e3cef60\nDERIVATION_START_HEIGHT=20996776\nL1_MSG_START_HEIGHT=20996776\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"Default Directory:"})})}),"\nFor running a validator on the mainnet, the ",(0,t.jsx)(n.code,{children:"MORPH_HOME"})," directory defaults to ",(0,t.jsx)(n.code,{children:"../mainnet"}),". You can customize this path to suit your setup."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"Layer1 RPC URLs:"})})}),"\nEnsure you provide the correct RPC URLs for the Layer 1 execution client (L1_ETH_RPC) and the beacon chain client (L1_BEACON_CHAIN_RPC). These URLs are essential for the validator to fetch rollup batches and maintain synchronization."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"3. Run the following command"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cd morph-node\nmake run-validator\n"})}),"\n",(0,t.jsx)(n.h3,{id:"sync-from-snapshot",children:"Sync from snapshot"}),"\n",(0,t.jsx)(n.p,{children:"We recommend synchronizing blocks using snapshot data to reduce the time required for block synchronization. This approach allows you to start the node from a specific block height, significantly reducing the time needed to reach the latest state."}),"\n",(0,t.jsx)(n.h4,{id:"1-clone-the-dockerfile-repository",children:"1. Clone the dockerfile repository"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/morph-l2/run-morph-node.git\n"})}),"\n",(0,t.jsx)(n.h4,{id:"2-download-the-snapshot",children:"2. Download the Snapshot"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"morph-node/.env"})," configuration file in the repository you just cloned is designed for setting up the Morph node on the mainnet. By default, it is pre-configured to use the latest snapshot."]}),"\n",(0,t.jsxs)(n.p,{children:["If you need a historical snapshot, you must manually update the ",(0,t.jsx)(n.strong,{children:"SNAPSHOT_NAME"})," in the ",(0,t.jsx)(n.code,{children:"morph-node/.env"})," file. (Note: For the ",(0,t.jsx)(n.strong,{children:"testnet"}),", the corresponding file is ",(0,t.jsx)(n.code,{children:"morph-node/.env_holesky"}),".)"]}),"\n",(0,t.jsxs)(n.p,{children:["You can find the historical snapshot names from ",(0,t.jsx)(n.a,{href:"https://github.com/morph-l2/run-morph-node?tab=readme-ov-file#snapshot-information",children:(0,t.jsx)(n.strong,{children:"Snapshot Information"})}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// ...\n\nMAINNET_SNAPSHOT_NAME={your expected snapshot name} \n\n// ...\n"})}),"\n",(0,t.jsx)(n.p,{children:"Run the following command to download and decompress the snapshot for your network:"}),"\n",(0,t.jsx)(n.p,{children:"For the mainnet:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"make download-and-decompress-mainnet-snapshot\n"})}),"\n",(0,t.jsx)(n.p,{children:"For the testnet:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"make download-and-decompress-holesky-snapshot\n"})}),"\n",(0,t.jsx)(n.h4,{id:"3-set-up-the-snapshot",children:"3. Set up the snapshot"}),"\n",(0,t.jsxs)(n.p,{children:["After downloading, locate the snapshot by placing the extracted data files in the correct directory specified by the ",(0,t.jsx)(n.strong,{children:"MORPH_HOME"})," path in your ",(0,t.jsx)(n.code,{children:"morph-node/.env"})," file. Ensure the data files align with the node's expected structure to allow seamless synchronization."]}),"\n",(0,t.jsxs)(n.p,{children:["For example, if the snapshot folder is named ",(0,t.jsx)(n.code,{children:"snapshot-20241218-1"}),","]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["move the directory ",(0,t.jsx)(n.code,{children:"snapshot-20241218-1/geth"})," to the ",(0,t.jsx)(n.code,{children:"${MORPH_HOME}/geth-data"})," directory."]}),"\n",(0,t.jsxs)(n.li,{children:["move the contents from ",(0,t.jsx)(n.code,{children:"snapshot-20241218-1/data"})," to the ",(0,t.jsx)(n.code,{children:"${NODE_DATA_DIR}/data"})," directory."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"mv ./morph-node/snapshot-20241218-1/geth ${MORPH_HOME}/geth-data\nmv ./morph-node/snapshot-20241218-1/data/* ${MORPH_HOME}/node-data/data\n"})}),"\n",(0,t.jsx)(n.p,{children:"The folder structure will be like"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"\u2514\u2500\u2500 ${MORPH_HOME}\n    \u251c\u2500\u2500 geth-data // data directory for geth\n    \u2502\xa0\xa0 \u2514\u2500\u2500 static-nodes.json\n    \u2502\xa0\xa0 \u2514\u2500\u2500 geth // directory from snapshot/geth   \n    \u2514\u2500\u2500 node-data // data directory for node\n        \u251c\u2500\u2500 config\n        \u2502\xa0\xa0 \u251c\u2500\u2500 config.toml\n        \u2502\xa0\xa0 \u2514\u2500\u2500 genesis.json\n        \u2514\u2500\u2500 data // data directory from snapshot/node\n"})}),"\n",(0,t.jsx)(n.h4,{id:"4-update-the-environment-variables",children:"4. Update the Environment Variables"}),"\n",(0,t.jsxs)(n.p,{children:["Before running the node, update the ",(0,t.jsx)(n.code,{children:"DERIVATION_START_HEIGHT"})," and ",(0,t.jsx)(n.code,{children:"L1_MSG_START_HEIGHT"})," variables in the ",(0,t.jsx)(n.code,{children:"morph-node/.env"})," file (or ",(0,t.jsx)(n.code,{children:".env_holesky"})," for the testnet)."]}),"\n",(0,t.jsxs)(n.p,{children:["Refer to ",(0,t.jsx)(n.a,{href:"https://github.com/morph-l2/run-morph-node?tab=readme-ov-file#snapshot-information",children:"snapshot-information"})," for the specific values of the configuration heights. Ensure that the corresponding height values match the snapshot version you are configuring."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// ...\nMAINNET_SNAPSHOT_NAME={your expected snapshot name} \n\n// ...\nDERIVATION_START_HEIGHT={the expected start height match the snapshot}\nL1_MSG_START_HEIGHT={the expected start height match the snapshot}\n\n"})}),"\n",(0,t.jsx)(n.h4,{id:"5-run-the-validator",children:"5. Run the Validator"}),"\n",(0,t.jsx)(n.p,{children:"With the snapshot and configuration files ready, navigate to the morph-node folder under your cloned repository, and start the node using the provided command"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"cd morph-node\nmake run-validator\n\n// or for testnet\ncd morph-node\nmake run-holesky-validator\n"})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},1582:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>a});var t=o(758);const r={},s=t.createContext(r);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);